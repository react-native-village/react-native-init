/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ProjectTaskInterface extends utils.Interface {
  functions: {
    "assignPerformer(address)": FunctionFragment;
    "assignRequest()": FunctionFragment;
    "completeTask()": FunctionFragment;
    "employer()": FunctionFragment;
    "rejectTask()": FunctionFragment;
    "requestChanges(string,string)": FunctionFragment;
    "selected_performer()": FunctionFragment;
    "sendTaskToReview()": FunctionFragment;
    "short_title()": FunctionFragment;
    "status()": FunctionFragment;
    "task_cost()": FunctionFragment;
    "task_description_link()": FunctionFragment;
    "wishing_performers(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assignPerformer"
      | "assignRequest"
      | "completeTask"
      | "employer"
      | "rejectTask"
      | "requestChanges"
      | "selected_performer"
      | "sendTaskToReview"
      | "short_title"
      | "status"
      | "task_cost"
      | "task_description_link"
      | "wishing_performers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assignPerformer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assignRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeTask",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "employer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectTask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestChanges",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "selected_performer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTaskToReview",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "short_title",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "task_cost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "task_description_link",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wishing_performers",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignPerformer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rejectTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selected_performer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendTaskToReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "short_title",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "task_cost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "task_description_link",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wishing_performers",
    data: BytesLike
  ): Result;

  events: {
    "RequestForChanges(address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequestForChanges"): EventFragment;
}

export interface RequestForChangesEventObject {
  recipient: string;
  message: string;
  additionalLink: string;
}
export type RequestForChangesEvent = TypedEvent<
  [string, string, string],
  RequestForChangesEventObject
>;

export type RequestForChangesEventFilter =
  TypedEventFilter<RequestForChangesEvent>;

export interface ProjectTask extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProjectTaskInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assignPerformer(
      performer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assignRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeTask(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    employer(overrides?: CallOverrides): Promise<[string]>;

    rejectTask(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestChanges(
      message: PromiseOrValue<string>,
      additional_link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selected_performer(overrides?: CallOverrides): Promise<[string]>;

    sendTaskToReview(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    short_title(overrides?: CallOverrides): Promise<[string]>;

    status(overrides?: CallOverrides): Promise<[number]>;

    task_cost(overrides?: CallOverrides): Promise<[BigNumber]>;

    task_description_link(overrides?: CallOverrides): Promise<[string]>;

    wishing_performers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  assignPerformer(
    performer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assignRequest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeTask(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  employer(overrides?: CallOverrides): Promise<string>;

  rejectTask(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestChanges(
    message: PromiseOrValue<string>,
    additional_link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selected_performer(overrides?: CallOverrides): Promise<string>;

  sendTaskToReview(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  short_title(overrides?: CallOverrides): Promise<string>;

  status(overrides?: CallOverrides): Promise<number>;

  task_cost(overrides?: CallOverrides): Promise<BigNumber>;

  task_description_link(overrides?: CallOverrides): Promise<string>;

  wishing_performers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    assignPerformer(
      performer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    assignRequest(overrides?: CallOverrides): Promise<void>;

    completeTask(overrides?: CallOverrides): Promise<void>;

    employer(overrides?: CallOverrides): Promise<string>;

    rejectTask(overrides?: CallOverrides): Promise<void>;

    requestChanges(
      message: PromiseOrValue<string>,
      additional_link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    selected_performer(overrides?: CallOverrides): Promise<string>;

    sendTaskToReview(overrides?: CallOverrides): Promise<void>;

    short_title(overrides?: CallOverrides): Promise<string>;

    status(overrides?: CallOverrides): Promise<number>;

    task_cost(overrides?: CallOverrides): Promise<BigNumber>;

    task_description_link(overrides?: CallOverrides): Promise<string>;

    wishing_performers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RequestForChanges(address,string,string)"(
      recipient?: null,
      message?: null,
      additionalLink?: null
    ): RequestForChangesEventFilter;
    RequestForChanges(
      recipient?: null,
      message?: null,
      additionalLink?: null
    ): RequestForChangesEventFilter;
  };

  estimateGas: {
    assignPerformer(
      performer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assignRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeTask(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    employer(overrides?: CallOverrides): Promise<BigNumber>;

    rejectTask(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestChanges(
      message: PromiseOrValue<string>,
      additional_link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selected_performer(overrides?: CallOverrides): Promise<BigNumber>;

    sendTaskToReview(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    short_title(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    task_cost(overrides?: CallOverrides): Promise<BigNumber>;

    task_description_link(overrides?: CallOverrides): Promise<BigNumber>;

    wishing_performers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assignPerformer(
      performer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assignRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeTask(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    employer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectTask(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestChanges(
      message: PromiseOrValue<string>,
      additional_link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selected_performer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendTaskToReview(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    short_title(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    task_cost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    task_description_link(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wishing_performers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
