/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  StandardContract,
  StandardContractInterface,
} from "../StandardContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "myInt",
        type: "uint256",
      },
    ],
    name: "store",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e38061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636057361d14602d575b600080fd5b60436004803603810190603f91906085565b6045565b005b8060008190555050565b600080fd5b6000819050919050565b6065816054565b8114606f57600080fd5b50565b600081359050607f81605e565b92915050565b6000602082840312156098576097604f565b5b600060a4848285016072565b9150509291505056fea264697066735822122036c2a7a2dd9d2a9bec479bcb4deef38039ec864cefe1d7d06c0e6d61d3726f5764736f6c63430008110033";

type StandardContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StandardContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StandardContract__factory extends ContractFactory {
  constructor(...args: StandardContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StandardContract> {
    return super.deploy(overrides || {}) as Promise<StandardContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StandardContract {
    return super.attach(address) as StandardContract;
  }
  override connect(signer: Signer): StandardContract__factory {
    return super.connect(signer) as StandardContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StandardContractInterface {
    return new utils.Interface(_abi) as StandardContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StandardContract {
    return new Contract(address, _abi, signerOrProvider) as StandardContract;
  }
}
